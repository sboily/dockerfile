debug=4
log_stderror=yes

memdbg=5
memlog=5

disable_tcp=yes
auto_aliases=no

fork=yes
children=4

dns_cache_init=no
use_dns_cache=no

port=5060
listen=udp:0.0.0.0:5060

# ------------------ module loading ----------------------------------
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"
loadmodule "path.so"
loadmodule "xhttp.so"
loadmodule "jsonrpcs.so"


# ----------------- setting module-specific parameters ---------------
modparam("jsonrpcs", "transport", 0)

# ----- rr params -----
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 0)

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)

# ----- acc params -----
modparam("acc", "log_flag", 1)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_extra", 
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- path params -----
modparam("path", "use_received", 1)

# -- dispatcher params --
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
#modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
#modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
#modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
#modparam("dispatcher", "ds_ping_method", "OPTIONS")
#modparam("dispatcher", "ds_ping_interval", 30)
#modparam("dispatcher", "ds_probing_mode", 1) 
#modparam("dispatcher", "ds_probing_threshold", 3) 

####### Routing Logic ########

# main request routing logic

route {

        xlog("L_INFO", "--- SCRIPT: GOOOOO !!!!!!\n");
	# per request initial checks
	route(REQINIT);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE"))
	{
		setflag(1); # do accounting
	}

	# handle presence related requests
	route(PRESENCE);

	
	# handle registrations
	route(REGISTRAR);

	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations
	route(DISPATCH);
}

route[REGISTRAR] {
    xlog("L_INFO", "--- SCRIPT: REGISTER BEFORE !!!!!!\n");
    if (is_method("REGISTER"))
    {
	xlog("L_INFO", "--- SCRIPT: REGISTER !!!!!!\n");
        #if (!add_path("loadbalancer", "ob")) {
	#    sl_send_reply("503", "Internal Path Error");
        #}

	if(!ds_select_dst("1", "0"))
	{
	        xlog("L_INFO", "--- SCRIPT: No destination\n");
		send_reply("404", "No destination");
		exit;
	}
	xlog("L_INFO", "--- SCRIPT: going to <$ru> via <$du>\n");
	rewritehost("$du");
	route(DISPATCH);
    }
}


route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(1); # do accounting ...
				setflag(3); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	sl_send_reply("404", "Not here");
	exit;
}

# Dispatch requests
route[DISPATCH] {
	# round robin dispatching on gateways group '1'
	if(!ds_select_dst("1", "4"))
	{
	        xlog("L_INFO", "--- SCRIPT DISPATCH: No destination\n");
		send_reply("404", "No destination");
		exit;
	}
	xlog("L_INFO", "--- SCRIPT: going to <$ru> via <$du>\n");
	t_on_failure("RTF_DISPATCH");
	route(RELAY);
	exit;
}

# Sample failure route
failure_route[RTF_DISPATCH] {
	xlog("L_INFO", "--- SCRIPT: RTF DISPATCH\n");
	if (t_is_canceled()) {
		exit;
	}
	# next DST - only for 500 or local timeout
	if (t_check_status("500")
			or (t_branch_timeout() and !t_branch_replied()))
	{
		if(ds_next_dst())
		{
			t_on_failure("RTF_DISPATCH");
			route(RELAY);
			exit;
		}
	}
}

event_route[xhttp:request] {
    if(src_ip!=127.0.0.1) {
        xhttp_reply("403", "Forbidden", "text/html",
            "<html><body>Not allowed from $si</body></html>");
        exit;
	}
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
	} else {
        xhttp_reply("200", "OK", "text/html",
            "<html><body>Wrong URL $hu</body></html>");
    }
    return;
}
